[["intro-to-this-book.html", "Chapter 1 INTRO TO THIS BOOK 1.1 CODING? WHAT IS IT 1.2 What does a programmer do?", " Chapter 1 INTRO TO THIS BOOK So you want to learn R? Now, programming is not easy. It is also not so hard.. What the hell is this guy on about? You will understand some concepts very easily and some concepts will be harder to grasp. Sometimes, some new concepts will be built on previous ones you learned, so it is important to always pay attention to detail and keep an open mind. You will be face a lot of errors, your code won’t work, at other times even ChatGPT will not be able to give you good solutions to copy and paste, you will want to punch your screen at times, other times maybe just your keyboard or other times you might just want to throw your laptop away, Jeez, man, alright if this is something you are completely interested in, let me give you the good news now. There is no feeling better than writing a program that works as intended and runs perfectly. You feel like THAT GUY! You run your code and look at that imaginary video camera in the corner of your room like prime Michael Scott ad´nd feel wow I really am that good? When you’re a developer, on some days, you’re gonna feel like a genius, other days you’re gonna feel like a complete idiot that doesn’t know jack-[redacted]. Anyone can learn to code, you can learn how to write lines of code for long enough and convince yourself and/or if you’re like me everyone else that you are good. The point of coding is to be able to use your code to solve actual problems. The very little concepts you learn, how do you intimately understand them, how do you assemble, like LEGO pieces, bits and lines of code to build functional programs. Programs that do actual stuff. That is the point of being a developer: building things. You do not want to be like Tottenham Hotspur and always build stuff but never actually know how to wIn StUfF… sorry, have a point for building what you build. At this point I would personally advise you, yeah, no, seriously that this journey of learning how to code will be fun, it will be ugly; for some code challenges, you will be staring at your screen at 4 AM wondering if it is worth it. “Jeff??? Are you convincing me to code or not?” Don’t worry I am trying to make sure you understand that, this is no easy path to tread and if you start learning to code half-heartedly, you most likely are not going to make it eventually. I am not kidding when I say you need to try to read or write code for 30 minutes to an hour at least everyday or if you’re like me and enjoy the weekend away from electronic devices, during the weekdays. 1.1 CODING? WHAT IS IT Simple, coding is the art of writing instructions in a programming language to build something called a program. There are so many programming languages out there: C, JavaScript, Rust, Java, HTML, CSS, PHP, SQL, etc. You will notice we left one popular programming language out: Python. Honestly if you ever make it to the end of this course, one of the requirements is for you to be a full time Python hater and troll people online for saying it is better than R! Don’t do that seriously lol… Python is another versatile programming language which is popular for it’s equally readable syntax and ease to learn. But in terms of statistical computing and/or programming, if you ask the old gods and the new, they will tell you R is way better. Back to coding now. You notice how we talked about coding being the art of writing instructions that will be executed by a computer to create a program or an application? That is the point of coding, so the programming language converts your code into instructions your computer can understand and your computer processes your code for you building the program you wrote code for. Computers understand only binary language to process your code, in layman’s terms as Joey Tribbianni would say: goo-goo-gaga! Binary is just 1s and 0s and each programming language you learn compiles your code into machine readable code that allows the computer to run it and give you a program. No kidding computers are fast, no, like really fast and unlike you who is unprepared to do a monotonous task continuously for even 10 minutes, a computer can do that for longer without complaining. They can perform complex calculations, store huge amounts of data, perform repetitive tasks, something you and I cannot keep up. 1.2 What does a programmer do? Because I do not want to get cancelled, as it’s an ick for my crush, I will not start a war on specifying what and who these categories are and the inevitable question of which is better(I cannot say that it is developer). If you are going to code, especially if you are starting out, you are going to be building a lot of things from scratch. You are going to put together lines of code here and there to build programs. You are also going to actually test those programs to see if they actually run well and in the inevitable scenario that your code fails to do what you built it to do, you are going to become a code doctor(wow, that might be a good username) and perform the most dreaded task of programming, the part where the mighty tremble and fail the part where you scan through lines and do not see where the problem is: DEBUGGING. You’re probably going to do more debugging as you go farther in your programming journey. Initially, you’re going to be doing a lot of building and testing and then when parts of your code do not work, you’re going to have to debug. Simply put, debugging is the process of finding and resolving errors or if you’re cool, finding and removing or resolving bugs in your code. Now we’re not going to be getting rid of bugs with insecticide as we do not want to get cancelled by the wonderful insect-rights community, so removing bugs is just fixing your code to work in an expected way. It happens to even me but most of the tie, bugs are inevitable, your code works today or a line or few lines of code you stole from StackOverflow worked perfectly but you fire up your computer the next day and you get an error everytime you run your code again. You start panicking, you tried to fix it how best you thought could be fixed but it’s still not working. Well first of all, be me because contrary to popular belief, I do not actually know what a sTaCkOvEfLoW is… To be honest debugging is an art. You will need to understand errors. In this course, we will take the counter intuitive approach. Instead of fearing errors and panicking when your code does not work, you will be invigorated whenever your code throws up an error. You dear madam or kind sir will become the bane of errors. Nothing dramatic, but one of the big aims of this course is to make you comfortable with errors. Errors are simply ways of telling you the logic in your code is flawed and they test your knowledge of concepts and also your application/implementation of that concept in your code. The good thing you will find is, with time you will become a better programmer over time because of the mistakes you have made in the past. This course will oddly encourage you to make mistakes as they help you consolidate what ever loose piece of knowledge you have in your head. Now we will move on to the next chapter where we talk more about R and R programming and its importance and why we are going to learn it. "],["what-is-r.html", "Chapter 2 WHAT IS R", " Chapter 2 WHAT IS R R is a programming language used in statistical computing, data analysis, data science among a numerous host of other fields. R was developed in the early 1990s by Ross Ihaka and Robert Gentleman at New Zealand’s University of Auckland and since then, R has morphed into a bit of a Swiss army knife. The language is open source, meaning anyone can contribute to It or build packages with it that enhances R’s usage in numerous fields. R is a powerful tool that is used for data visualization, analysis, modelling, web scraping, machine learning, etc. As a statistical computing languagem R, developed from another programming language called S, is adept for working with huge datasets and providing tools for working with them too. Tools for working with R can be referred to as packages. Think of packages as lines of code written to help solve other problems. For example, someone has written a package that helps import .csv data files into R without having to write so many lines of code to do this. R is used in machine learning, there are numerous packages in R that help you perform machine learning tasks such as classification, regression, boosting, neural networks etc. You also see some of the really nice plots some of the online journals use for articles to visualize statistics? Most of these charts are built with R. R does not stop there, say you have lonbgitude and latitude data in a dataset, can you plot it on top of a map to visualize it? YES! R is used for mapping too! How about some statistical analysis too? You want to perform ANOVA tests? analyze central tendency metrics of a given dataset? R has your back. If you want to work with data, R might be the best friend you will make in your life. There is a huge community of people who use R on a day to day basis and also share tips on how to get about. Learning R will equip you with tools to manipulate, clean, analyze, visualize and/or model datasets to answer whatever question you want answered. R being open source means you can also contribute to it by developing a package(Spoiler alert: you will do one in the building packages chapter). R is a handy tool for teachers, statisticians, researchers, analysts, journalists as well as any profession that works with data! We will explore to good detail, R’s deep potential in statistical computing and at the end of each lesson, you will be equipped with skills to gradually develop your skills in R from no or little knowledge, slowly to expert level. "],["starting-with-r.html", "Chapter 3 STARTING WITH R 3.1 Downloading R &amp; RStudio 3.2 Creating Our First R Project", " Chapter 3 STARTING WITH R “Alright Jeff, that’s enough show me how to code in R NOW!” Woah woah easy tiger. So before we can start working with R, we will have to install it. Now remember. We will install the statistical language R, and we will install another application called RStudio. “Studio? Are we going to produce beats now?” No. RStudio is an IDE, short for Integrated Development Environment. Why is an IDE important. It will give us a lot of features and make the coding experience more pleasant to work with. YOu can create projects and have your code, any datasets you might want to import or export, all your code objects in one place. This helps with file management issues as well as makes 3.1 Downloading R &amp; RStudio You can download R - For Windows - For macOS If you like suffering and use a Linux system (Debian, Fedora/Redhat, Ubuntu), you can download R here You can then download RStudio here. Scroll down and select your operating system and download and install it. 3.2 Creating Our First R Project In the top right of your screen, you should see a R in a blue box and Project set to None. Click on it, select New Project then select New Directory then New Project and name the project whatever you want to name it and then specify an appropriate location for your project folder on your computer and voila! You have created your first R project! Coding in RSTudio without a project can get really tedious and you would have to manually be specifying file paths and dealing with location issues. It is recommended that for each project you embark on, you can create a new project for that so you have everything in a central place and can work from there. So in RStudio, you should see 3 panes on your screen right now. You are probably daydreaming that you are ggoing to be a super developer and write one million lines of code and have everything in the different panes moving to make you seem like you are the guy. WAKE UP, pal! No seriously so the 3 panes we have now in RStudio, the one on the left is your console, where every R code you type should run. the two ti your right are tabbed just like console but the one on top contains your most important part, your environment. Every object your code creates will be stored here. You can explore the other tabs to familiarize yourself with the application but if you do not want to be overwhelmed, let us move to the last tab. That contains your files, every plot or chart your code creates will be printed to the plots tab and you can view packages you have installed in the packages tab. We wouldn’t really need to go into the other tabs now as I am late for a date while writing this… just kidding In all honesty, I will not delve into other parts as I want to keep this short and simple so we build from there. So the console is where you can run your R code one line at a time, you can actually type in the console. Type your first name, wrapped in double quotes in the console in RStudio right now! If you are like me and you are called Jeff, you can type in that and wrap double quotes around it like this: “Jeff”. WOW, you beautiful fucking stack of sunshine you wrote your first line of code in R! So we see first hand that in the console, code only gets run line by line. Enter the R Script! Think of an R Script as your text editor. You can write your program in as many lines of code you want and run it and the output will be run in the console. But where is your R Script you ask me? If you use WIndows, you can use Ctrl + Shift + N to open a new script or if you enjoy pain and want to do everything manually, Go to File in the top left of your RStudio window and select New File and then click on R Script and you’re there! In this lesson we have downloaded and installed R and RStudio and familiarized ourselves with what Rstudio looks like and what the different panes do. We also created a new R Script where we can write R code. "],["lesson-1-data-types.html", "Chapter 4 LESSON 1: Data Types 4.1 Numeric Data Type 4.2 Integer Data Type 4.3 Logical Data Type 4.4 Character Data Type 4.5 Variables 4.6 Numeric &amp; Integer Data Types 4.7 Basic Numeric and Integer Data Type Operations 4.8 Basic Character Data Type Operations 4.9 LESSON 1: CODE CHALLENGE", " Chapter 4 LESSON 1: Data Types Data types are the fundamental building blocks of almost every program you will ever write in R. They define the data type a object can contain and as an effect the types of operations that can be performed on that objects. In simpler words, data types are like different kinds of LEGO blocks you use to build things. They tell the computer what kind of information it’s dealing with, like numbers or words, and what you can do with that information, like adding numbers together or putting words together as a sentence for example, but in R, we can do so much more with these. In R, we have four main types of data and they are: - Numeric (num) - Integer (int) - Logical (logi) - Character (chr) 4.1 Numeric Data Type Numeric data types are data types that are either whole numbers like 10, 3, 78, 90, 55 and 7, or decimals like 3.14, 7.5, 49.7, 3.3334, 0.5 and 123.2245. You will see this data type represented by the abbreviation num in R. In short, in R, if you see any kind of number with a decimal point, it is a numeric data type. 4.2 Integer Data Type Integer data types refer to data types that are whole numbers, and do not have a decimal point like -5, 45, 33, 7, 9 and 67. They are usually represented with an L at the end so, 7L is an integer data type. They are represented by the abbreviation int in R. 4.3 Logical Data Type Logical or boolean data types represents truth values, either TRUE or FALSE. Logical data types are used for comparisons and conditional statements in R and are represented by logi. 4.4 Character Data Type Character data types are used to refer to text, string or alphanumeric data in R. They are represented by chr. Do note that, whenever you are working with text data, you need to wrap it inside single or double quotes for R to understand you are working with a character data type else R will throw up an error. You remember when you typed in your first line of R code in the console and hit enter it printed your name? Try typing your first name but this time, do not wrap it in quotes. Just literally type your name in the console and hit enter. R should throw up an error like Error: object ... not found. Why? This is because in R whenever you do not wrap a string or text in quotes, it reads it as an object and it will throw up an error because it was unable to find that object. This leads us to the last part of this lesson on data structures, interactive examples. But before we need to learn one more concept for this lesson. You notice whenever you type in a data type, try typing in a numeric, logical or character value in the code chunk below. Notice that it prints the value and then that’s it, it disappears? This behavior is not so helpful when programming. Sometimes we need to store data and then use it later on in our code. This helps make our program neater. 4.5 Variables Enter variables! In R, a variable is a named storage location that holds data, and its value can be changed or updated during the course of a program. Variables are fundamental for storing and manipulating data in R. When you assign a value to a variable, you are creating a reference to a specific location in memory where that value is stored and you can use that value by referencing the variable name. In R, the syntax for assigning a variable is simple: variable_name &lt;- value Where variable_name is the name of your variable and &lt;- is the assignment operator in R and value is the value being assigned to that variable Think of a variable as a container for storing different objects. Supposing we have a container that has cookies, we label the container as cookies. We have another container that stores pencils, we label that as pencils and another that stores water, we can label that as water. So what happens is, each container stores a quantity of something, in programming we refer to that as variables. Let us say we have 5 cookies in the cookies container and we have 10 pencils in the pencils container and we have just water in the water container. We can represent that programatically like this: eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB2YXJpYWJsZXNcbmNvb2tpZXMgPC0gNVxucGVuY2lscyA8LSAxMFxud2F0ZXIgPC0gXCJ3YXRlclwiXG5cbiMgUHJpbnQgdmFyaWFibGVzXG5jb29raWVzXG5wZW5jaWxzXG53YXRlciJ9 When we print our variables, voila! We still have them stored safely for us. We can decide to change the values the variable contain and it will update for us and we can have the new values available for us in our code. In R, I would in fact discourage from hardcoding values as much as possible. Try to store values in variables so you can have them accessible later on in your program. This helps a lot with debugging and when you figure out something is wrong, you only need to update the value you assigned to the variable and your code will run as normal, this helps you avoid updating every instance of the value if you hardcoded it. Try to live up to the famous words uttered by John F. Woods that says: “Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.” Always strive for readability. Let us now truly start playing with the data types we’ve learned and combine the concept of variables with it. 4.6 Numeric &amp; Integer Data Types In the next two code chunks below, we will assign different numeric and then integer values and then print them to our console. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIE51bWVyaWMgZGF0YVxuaGFsZiA8LSAwLjVcbnBpIDwtIDMuMTRcbmxlbmd0aCA8LSA3LjVcblxuaGFsZlxucGlcbmxlbmd0aCJ9 We assigned and printed numeric data types. Let us see the same thing with an integer too. Integers, if you remember are whole numbers. Let us create 3 variables with names of 3 kids: Abena, Kofi and Yaa and assign their ages to these variables eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB2YXJpYWJsZXNcbmFiZW5hIDwtIDEwXG5rb2ZpIDwtIDE3XG55YWEgPC0gMTJcblxuIyBQcmludCB2YXJpYWJsZXNcbmFiZW5hXG5rb2ZpXG55YWEifQ== Voilà! We assigned and printed our integer variables. Time to try interactive hands on coding! In other words, GET SCHWIFTY!! Let us dial it back down to primary school. You have 2 pens, 3 pencils, an eraser, and a sharpener. Can you code these values below and assign them to their respective descriptive variables? Remember to assign all of the values to their respective variables and then print them. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFdyaXRlIHlvdXIgY29kZSBoZXJlIn0= 4.7 Basic Numeric and Integer Data Type Operations We can perform arithmetic operations with numeric and integer data types in R. The operators for performing these operations are the same ones you learnt back in school. HAHA just kidding. Arithmetic operators are similar in R, with some slight differences for some operators. +: addition -: subtraction *: multiplication /: division %%: modulus (remainder for division) ^: exponent Instead of regular x, in R you use the asterisk operator, *, to perform multiplication and the / to perform division. Modulus is used to find the remainder of a division operation. IMPORTANT: the order of operations in mathematics, BODMAS or PEMDAS, depending on where you are coming from, still holds true in R We will not go through the really basic operators like addition, subtraction, division and multiplication in the following examples we will see how the modulus and exponent operators works in R. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFBlcmZvcm0gbW9kdWx1cyBhbmQgZXhwb25lbnQgb3BlcmF0aW9uc1xueCA8LSAyN1xueSA8LSAzXG5cbiMgTW9kdWx1c1xueCAlJSB5XG5cbiMgRXhwb25lbnRcbnggXiB5In0= Perfect! So as we already know, 27 divided by 3 leaves no remainder and also, 27 raised to the power 3 is 19,683. This is how to use the modulus and exponent operators. But before, I would like to see you try to use them so you feel comfortable with it. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB0d28gbnVtZXJpYy9pbnRlZ2VyIHZhbHVlcyBhbmQgcGVyZm9ybSB0aGUgbW9kdWx1cyBhbmQgZXhwb25lbnQgb3BlcmF0aW9ucyJ9 Perfect we now know how to perform arithmetic operations in R. Now let’s get a little lazy. So if you took my advice, it is always easier in R to perform operations if you do not hard-code values. It makes your code easier to maintain and you can perform operations with your variables even more easily. Let us take a random scenario for example: say we wanted to calculate the area of a triangle in R. We know the formula for finding an area for finding the area of a triangle is: Area = 1/2 * Base * Height Supposing we had a triangle with a base of 15cm and a height of 23cm, let us calculate its area! eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENhbGN1bGF0ZSBhcmVhIG9mIGEgdHJpYW5nbGVcbmJhc2VfaW5fY20gPC0gMTVcbmhlaWdodF9pbl9jbSA8LSAyM1xuXG4jIFBlcmZvcm0gY2FsY3VsYXRpb25cbmFyZWEgPC0gMC41ICogYmFzZV9pbl9jbSAqIGhlaWdodF9pbl9jbVxuXG4jIFByaW50IGFyZWFcbmFyZWEifQ== Great! Our area is 172.5 centimetres! If we had a new triangle with base and height to be 8cm and 12 cm respectively, we only need to update the base_in_cm and height_in_cm variables and we will still get the correct answer. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENhbGN1bGF0ZSBuZXcgdHJpYW5nbGUgYXJlYVxuYmFzZV9pbl9jbSA8LSA4XG5oZWlnaHRfaW5fY20gPC0gMTJcblxuIyBQZXJmb3JtIGNhbGN1bGF0aW9uXG5hcmVhIDwtIDAuNSAqIGJhc2VfaW5fY20gKiBoZWlnaHRfaW5fY21cblxuIyBQcmludCBhcmVhXG5hcmVhIn0= 48 centimeters! Our code still run without any error. If we typed the values directly in our code and supposing there were numerous instances where we needed to use those values in our code, we would have to update each and every single one of them. Remember we learnt it is recommended to always avoid hardcoding when possible? In our triangle example, we could have assigned the value 0.5 to a variable and use it in our code, but for the area formula for triangles, it is a constant so we can leave it like that. If you want to be really neat about this when you have numerous instances and do not want to hard-code, you can assign it to a variable if you so desire. The area of a rectangle is expressed as: Area = l * w, where l is the rectangles length and w is its width. Now given a rectangle of dimensions 10cm and 4cm length and width respectively, can you calculate the area of this rectangle below? eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFdyaXRlIHlvdXIgY29kZSBiZWxvdyJ9 4.8 Basic Character Data Type Operations We can perform numerous operations with character data in R. You will see this referred to as strings also. Strings sounds cooler so let us use this term for the purpose of this lesson! We will learn some basic string operations and then try our hands on a couple of examples. 4.8.1 String Operations in R We will learn about five string operations and they are: Concatenation String Length Changing character case Trimming whitespace String interpolation Concatenation refers to joining two strings together. In R, we can use the paste() function. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSBmaXJzdG5hbWUgYW5kIGxhc3RuYW1lXG5maXJzdF9uYW1lIDwtIFwiTW9uaWNhXCJcbmxhc3RfbmFtZSA8LSBcIkdlbGxlclwiXG5cbiMgQ29uY2F0ZW5hdGUgZmlyc3QgYW5kIGxhc3QgbmFtZXNcbmZ1bGxfbmFtZSA8LSBwYXN0ZShmaXJzdF9uYW1lLCBsYXN0X25hbWUpXG5mdWxsX25hbWUifQ== Yes and now we have the full name of every man’s dream woman all around the globe, thank you! We can also check for the number of characters or length of a given string with a function known as nchar() eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSAzIHN0cmluZ3NcbmdyZWV0aW5nIDwtIFwiSGVsbG8gdGhlcmVcIlxuc2VudGVuY2UgPC0gXCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZm94XCJcbmVtcHR5X3N0cmluZyA8LSBcIlwiXG5ub3RfZW1wdHkgPC0gXCIgXCJcblxuIyBQcmludCBsZW5ndGggb2YgYWxsIDMgc3RyaW5nc1xubmNoYXIoZ3JlZXRpbmcpXG5uY2hhcihzZW50ZW5jZSlcbm5jaGFyKGVtcHR5X3N0cmluZylcbm5jaGFyKG5vdF9lbXB0eSkifQ== Before we discuss what happened up there, in R you can define an empty string by typing two double quotes without leaving space in between the quotes. If there is whitespace between the two double quotes, R interprets the whitespace as a character and this behavior is very important to understand as in R, \"Jones\" and \"Jones \" are not the same string. We will bring this concept up again later when we talk about checking for equality in R. Back to the code chunk above. We can see that, R counts whitespace as a character when we are checking for the length of a script. Our code returned the length of different strings supplied to it, 11, 43, 0 and 1. Strings are not always one word or two, they can be long sequences of text and in R, we can always find out the length by using the nchar() function Changing cases in R referes to converting a string to all lower or upper case. The respective operations can be performed by using tolower() and toupper(). eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENoYW5nZSB0aGUgY2FzZXMgb2YgdGhlIGZvbGxvd2luZyBzdHJpbmdzIHRvIGxvd2VyXG5uYW1lIDwtIFwiTElPTkVMIE1FU1NJXCJcbmJpa2luaV9ib3R0b20gPC0gXCJzUG9OZ0ViT2IgU3FVYVJlUGFOdFNcIlxuXG5uYW1lIDwtIHRvbG93ZXIobmFtZSlcbmJpa2luaV9ib3R0b20gPC0gdG9sb3dlcihiaWtpbmlfYm90dG9tKVxuXG4jIFByaW50IHVwZGF0ZWQgc3RyaW5nc1xubmFtZVxuYmlraW5pX2JvdHRvbVxuXG4jIENvbnZlcnQgdGhlbSB0byB1cHBlciBjYXNlIGFuZCB0aGVuIHByaW50XG5uYW1lIDwtIHRvdXBwZXIobmFtZSlcbmJpa2luaV9ib3R0b20gPC0gdG91cHBlcihiaWtpbmlfYm90dG9tKVxuXG5uYW1lXG5iaWtpbmlfYm90dG9tIn0= Very straightforward! These functions convert your strings to lower and uppercase. It is useful to note that, these functions will convert all alphabetic characters in your string. Trimming whitespace refers to removing leading and/or trailing whitespace in a string. In R, we can do that with the trimws() function like this: eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSBmcnVpdCB2YXJpYWJsZVxuZnJ1aXQgPC0gXCJtYW5nbyAgICAgICAgICAgICBcIlxuXG4jIFRyaW0gd2hpdGVzcGFjZVxudHJpbXdzKGZydWl0KSJ9 The function removed the trailing whitespace for us. What if there was leading and trailing whitespace? Can we trim that too? Of course! eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSBhIHZhcmlhYmxlIGFuZCBhc3NpZ24gYSB2YWx1ZVxuYXJ0aXN0IDwtIFwiICByaWhhbm5hIGJhZGdhbHJpcmkgIFwiXG5cbiMgVHJpbSB3aGl0ZXNwYWNlXG50cmltd3MoYXJ0aXN0KSJ9 That worked too! The function by default trims leading and trailing whitespace by default and has extra arguments if you want to do some more advanced, you know, trimming. In R, to find out more about how to use a function, highlight said function and press F1 to view the function documentation. Finally, we can perform a little bit of magic which may have gotten us in hot water if were at Salem back in the day. Just kidding this is not as impressive but we will talk about string interpolation. You remember how we said variables are important because they allow reuse later in our program? This might be a very good graphic illustration to see how that works. Supposing we have a program that takes in a user’s name and age and for example we have Bob who is 16 years old, says: “Happy Birthday, Bob, you are sixteen years old today!”, We can do that in R like this eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB1c2VyIGRldGFpbHNcbm5hbWUgPC0gXCJTYW1hbnRoYVwiXG5hZ2UgPC0gXCJ0d2VudHktdHdvXCJcblxubWVzc2FnZSA8LSBwYXN0ZShcIkhhcHB5IEJpcnRoZGF5LFwiLCBuYW1lLCBcInlvdSBhcmVcIiwgYWdlLCBcInllYXJzIG9sZCB0b2RheSFcIilcbm1lc3NhZ2UifQ== And that is basic string interpolation using paste(). We can interpolate as many variables into a string as we want but be sure we do that if we only need to. Interpolation is a dynamic way to work with strings so we do not have to keep defining variables over and over again. If for example our complex program which performs interpolation finishes saying happy birthday to Samantha and it gets a new input, all it needs to do is update the input with the new name and age and then just print it. Change the name and age below to your name and a theoretical age and then run the code to check if it works as expected. Remember to type the age in words. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB1c2VyIGRldGFpbHNcbm5hbWUgPC0gXCJcIlxuYWdlIDwtIFwiXCJcblxubWVzc2FnZSA8LSBwYXN0ZShcIkhhcHB5IEJpcnRoZGF5LFwiLCBuYW1lLCBcInlvdSBhcmVcIiwgYWdlLCBcInllYXJzIG9sZCB0b2RheSFcIilcbm1lc3NhZ2UifQ== We will go off-route and learn one final character data type operation using a function called substr(). When you get old and gray from programming in R you will deal with a lot of messy data an by then, this function will come in handy. So this substr() function is used to extract a part of a string you specify it to extract. We were supposed to learn a concept called indexing in our next chapter but let me introduce it to you now. It is called the index. The index is basically the position of an element in a given data structure. In more technical terms, it serves as a pointer or locator of an element or elements within a data structure. How is that relevant to us? Well the substr() argument in this context of extracting parts of a string takes 3 arguments. The first argument is the string that you want to work with, the start index and the end index. The syntax iis simple and it is as follows: substr(x, start, stop) where x is the string. Let us see this in action! Let us say you come across a scrambled word called “250Marie9”. This makes absolutely no sense and you want to only extract the name since that is something you can understand. Let us do this together in the code chunk below. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSBhIHN0cmluZ1xuc3RyaW5nIDwtIFwiMjUwTWFyaWU5XCJcblxuZXh0cmFjdGVkX3N0cmluZyA8LSBzdWJzdHIoc3RyaW5nLCBzdGFydCA9IDQsIHN0b3AgPSA4KVxuZXh0cmFjdGVkX3N0cmluZyJ9 Let us try it again this time with a different string. Don’t ask me how I got that, pal but say this is how Phoebe wrote it down for me: “Phoebe:853 557-7020”. We can extract Phoebe’s phone number like this below. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFBob2ViZSdzIG5vdGVcbnBob2ViZV9ub3RlIDwtIFwiUGhvZWJlOjg1MyA1NTctNzAyMFwiXG5cbiMgRXh0cmFjdCBoZXIgbnVtYmVyXG5waG9lYmVfbnVtYmVyIDwtIHN1YnN0cihwaG9lYmVfbm90ZSwgc3RhcnQgPSA4LCBzdG9wID0gMTkpXG5waG9lYmVfbnVtYmVyIn0= Perfect! Now don’t call her, please! That wraps it up for Lesson 1. I have to say here that, the biggest advantage and disadvantage in R is, you can mostly do what you like. You can be flexible and use whatever “legal” method works for you but once you do not understand concepts enough to apply them, your implementation becomes flawed and you introduce bugs into your program. So inasmuch as you can be flexible when writing your code, always make sure you are implementing solutions correctly. Failure to do this is a common source of errors when programming in R. There are other functions you use to convert data types into data types you want to work with. Did you notice when you printed phoebe_number the numbers were wrapped in quotes, making it a string? You cannot perform any numeric operations with that but why? In R, you can coerce a data type into another if it is compatible. We know that was a phone number for example and we can store that as a string because it has some symbols and whitespace in it. If we had a valid number wrapped in a string like \"85\", we can convert it to an integer using the as.integer() function. watch this below: eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJzdHJpbmcgPC0gXCI4NVwiXG5zdHJpbmdcblxubnVtIDwtIGFzLmludGVnZXIoc3RyaW5nKVxubnVtIn0= Do you notice the output? That is how effective data type conversion works. There is a function to convert to each of the data types we’ve learned about and they are as follows: numeric: as.numeric() integer: as.integer() character: as.character() logical: as.logical() But do not worry so much about them now, we will discuss this in a latter lesson. Below are some links you can read further on to just understand: Differences Between Assignment Operators in R Data Types in R 4.9 LESSON 1: CODE CHALLENGE Perform the following operations on variables a and b, which contain the values 15 and 3 respectively. add a and b subtract b from a multiply a by b divide b by a Define the variables a and b before you begin all your operations. Save the result of each operation to a variable and print your result after. Given the formula for finding the volume of a sphere, calculate the volume of a sphere with a radius of 25cm. Find out more about the formula for calculating this here Given the string: “XXX-951ALLEYDIAGON,HOGWARTS566-418 7587dumbledore@hogwarts.edu”, perform the relevant operations on it and produce the following: address should be: 951 DIAGON ALLEY, HOGWARTS Dumbledore’s email school telephone number These three should be separate variables. When you obtain you complete your operations, ave the school address to the variable address, Dumbledore’s email as email and telephone as tele_num. "],["lesson-2-data-structures.html", "Chapter 5 LESSON 2: Data Structures", " Chapter 5 LESSON 2: Data Structures Structure. Layout. Format. Organization. Architecture. All different words for the same terrible thing: BORINGGG! BOOOO!!! Now that we’ve finished appropriately booing the system we can now proceed to talk about what they are. So data structures in R are fundamental objects used to store data in R. Remember how data types were the building blocks of working with objects in R? Data structures are basically a collection of data types in R. Some data structures can only contain a homogeneous type of data while others can store heterogeneous data types. In R there are a number of data structures but for this book, we will talk about the four main types you will work with the most. These data structures are: Vector Matrix List Dataframe We will talk about each of the next 4 types in the next four lessons and you will learn what they are, how to use be a better programmer at using them to solve problems. Just like we learned with data types, we can perform operations with data structures and the operations we can do with data structures are even more powerful and allow for more customization than we could with data types. But, wait a minute. Remember how We said in programming, we build on concepts? The same way we manipulated and worked with data types will help us work even better with data structures. Without further ado, we shall go to the next lesson. "],["lesson-3-vectors.html", "Chapter 6 LESSON 3: Vectors 6.1 Other ways of creating vectors 6.2 VECTOR OPERATIONS", " Chapter 6 LESSON 3: Vectors Vectors are like the Swiss army knife of data structures. Almost every data structure can be built with vectors. Here are the main things you’d need to know about vectors: they are one dimensional they can only store homogeneous data types When we say vectors are one-dimensional, it means they are structured in a single line or sequence. To get a better picture of this, you know how tables for example are two-dimensional because the data they contain are structured in rows and columns, vectors aren’t like that. They are one dimensional meaning they contain data in a single sequence. Vectors can store a wide range of data types but there is a catch, you can only stored that particular data type. This is the homogenity characteristic of vectors. In plain and simple english, if you store numeric data type in R, that vector can only contain numeric data, same goes for integer, character and boolean data types. In R, to create a vector, you can use the c() function. The c means combine or concatenate.Let us see an example of a vector now. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIGNyZWF0ZSBhIHZlY3RvciBvZiBudW1iZXJzXG52ZWMgPC0gYygxLCAyICwgMywgNCwgNSwgNilcblxudmVjIn0= Voilà, we created a vector with numbers. We can create a vector containing other data types let us try character and boolean data types. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFZlY3RvciBvZiBuYW1lcyBvZiBGcmllbmRzXG5mcmllbmRzIDwtIGMoXCJNb25pY2EgR2VsbGVyXCIsIFwiUmFjaGVsIEdyZWVuZVwiLCBcIkpvZXkgVHJpYmJpYW5pXCIsXG4gICAgICAgICAgICAgXCJQaG9lYmUgQnVmZmF5XCIsIFwiQ2hhbmRsZXIgQmluZ1wiLCBcIlJvc3MgR2VsbGVyXCIpXG5cbmZyaWVuZHMifQ== eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIEEgdmVjdG9yIG9mIGJvb2xlYW5zXG5ib29sIDwtIGMoRkFMU0UsIFRSVUUsIEZBTFNFLCBGQUxTRSwgVFJVRSwgRkFMU0UsIFRSVUUpXG5cbmJvb2wifQ== We have seen how vectors are created. Do you remember how we said vectors are supposed to be homogeneus? Shall we attempt to mix data types and see if it works? eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIE1peGVkIHZlY3RvclxubWl4IDwtIGMoNywgNSwgXCJNb3J0eVwiLCBcIlJpY2tcIiwgOSlcblxubWl4In0= This works but in R there is something called expected behavior, I would like to point here. You remember how the c() function concatenates or combines elements? When the elements are not of the same data type, this function coerces all the elements into separate strings. Let us see how this works but before, in R, to check the type of an object, you can use the function class(). eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIE1peGVkIHZlY3RvclxubWl4IDwtIGMoNywgNSwgXCJNb3J0eVwiLCBcIlJpY2tcIiwgOSlcblxuY2xhc3MobWl4KSJ9 6.1 Other ways of creating vectors Although we gave created vectors using the combine function, we will learn other common ways of creating vectors. 6.1.1 The : operator In R when you use the colon operator, it creates a sequence of numbers from the first number on the right hand side to the left hand side. Don’t get too twisted, this is going to be simple. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciBvZiB5ZWFycyBmcm9tIDIwMDAgdG8gMjAxMFxueWVhcnMgPC0gMjAwMDoyMDEwXG5cbnllYXJzIn0= Now time to test your hands on this. Create a vector of numbers from 100 to 107 and assign to a variable called vec. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciBvZiBudW1iZXJzIGZyb20gMTAwIHRvIDEwNyIsInNvbHV0aW9uIjoiIyBDcmVhdGUgYSB2ZWN0b3Igb2YgbnVtYmVycyBmcm9tIDEwMCB0byAxMDdcbnZlYyA8LSAxMDA6MTA3XG52ZWMiLCJzY3QiOiJ0ZXN0X29iamVjdChcInZlY1wiKVxudGVzdF9vdXRwdXRfY29udGFpbnMoXCJ2ZWMgPC0gMTAwOjEwNzt2ZWNcIiwgaW5jb3JyZWN0X21zZyA9IFwiTWFrZSBzdXJlIHRvIHByaW50IGB2ZWNgLlwiKVxuc3VjY2Vzc19tc2coXCJTdWNjZXNzZnVsIVwiKSJ9 Bien fait. Monica Geller approves! 6.1.2 The seq() function Sometimes we want to generate a sequence of numbers but not exactly in a regular sequence. This is where the seq() function comes in handy. We can use it to create a vector with a specified start, end and an increment value. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0aW5nIGEgc2VxdWVuY2UgZnJvbSAxIHRvIDEwIGJ5IGluY3JlbWVudHMgb2YgMlxudmVjMSA8LSBzZXEoZnJvbSA9IDEsIHRvID0gMTAsIGJ5ID0gMilcblxudmVjMSJ9 Your turn! Create a sequence of vectors of multiples of 3 from 3 to 36 and assign it to v1. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFNlcXVlbmNlIGZyb20gMyB0byAzNiIsInNvbHV0aW9uIjoiIyBTZXF1ZW5jZSBmcm9tIDMgdG8gMzZcbnYxIDwtIHNlcShmcm9tID0gMywgdG8gPSAzNiwgYnkgPSAzKVxudjEiLCJzY3QiOiJ0ZXN0X29iamVjdChcInYxXCIpXG50ZXN0X291dHB1dF9jb250YWlucyhcInYxIDwtIHNlcShmcm9tID0gMywgdG8gPSAzNiwgYnkgPSAzKTsgdjFcIixcbiAgICAgICAgICAgICAgICAgICAgIGluY29ycmVjdF9tc2cgPSBcIk1ha2Ugc3VyZSB0byBwcmludCBgdmVjYC5cIilcbnN1Y2Nlc3NfbXNnKFwiU3VjY2Vzc2Z1bCFcIikifQ== 6.1.3 The vector() function We can create a vector by using the, you guessed it, vector() function! This function creates a vector of a specified length and data type. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciB3aXRoIHRoZSB2ZWN0b3IgZnVuY3Rpb24oKVxubnVtX3ZlYyA8LSB2ZWN0b3IobW9kZSA9IFwibnVtZXJpY1wiLCBsZW5ndGggPSAxMClcblxubnVtX3ZlYyJ9 This type of creating a vector is very handy and we will see why when we learn about loops and conditional statements. 6.2 VECTOR OPERATIONS Remember how we performed some operations with the data types we learned? Vectors are next level. In fact learning how to work with vectors will make you understand a lot about how R does things in the background when you call some operations on other data structures. We can perform arithmetic operations on numeric and integer vectors, perform logical operations on any type of vector and the most important secret I will disclose before is, in R when you call any descriptive statistic function, R most likely treats that data you supplied as a vector in the background. Real swiss-army knife huh? Let us take a further look at what we’re talking about. 6.2.1 Arithmetic Operations When you have a vector which is of numeric or integer type, you can perform arithmetic operations on that vector. Addition, subtraction, division, multiplication, etc. Right now seated behind my laptop typing this, I would probably add a piece of advice I already did when we talked about arithmetic operations on data types. When you are performing arithmetic operations in R, always remember that the rules of BODMAS or PEMDAS. Later, I will show you an example of how ignoring this can introduce bugs into your program. Let’s go and arithmetic operate deez vectors! eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIEFkZGl0aW9uXG52ZWMxIDwtIGMoMSwgMiwgMywgNCwgNSlcbnZlYzIgPC0gYygxMCwgMywgNSwgMSwgMTIpXG5cbnZlYzEgKyB2ZWMyIn0= How does R do this? When you call an arithmetic operation on two vectors, R initially checks if these two vectors are of the same length and then it adds each element at the same position in both vectors. For example the first element in vec1 is added to the first element in vec2, and the process is repeated for each element in the vector. You do notice how we said R initially checks to see if the two vectors are of the same length? In theory, when performing arithmetic operations with two vectors, it is recommended to ensure the vectors are of the same length. You do remember our dear old friend, Mr. Expected Behavior? Not paying attention to him can lead to unintended behavior in our code, a very common source of bugs. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSBhIHZlY3RvciBvZiB1bmVxdWFsIGxlbmd0aHNcbnYxIDwtIDE6NVxudjIgPC0gMTA6MTNcblxuIyBTdWJ0cmFjdCB2MSBmcm9tIHYyXG52MiAtIHYxIn0= So you noticed R coughed up a result for us but produced a warning that: Warning: longer object length is not a multiple of shorter object length This is because we tried to perform an arithmetic operation on two vectors of unequal length. R is of course happy to cough up a result for you but look closely at the result printed after the warning, it is a vector of length 5 elements. Quick tip: in R, you can use the function length() to check how many elements are in a vector. Let us go over our previous code once again and dissect it further. You remember how we said we will me comfortable and learn to understand errors and warnings instead of panicking when we see them? This is one of those times! eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSBhIHZlY3RvciBvZiB1bmVxdWFsIGxlbmd0aHNcbnYxIDwtIDE6NVxudjIgPC0gMTA6MTNcblxuIyBQcmludCB2ZWN0b3JzXG52MVxudjJcblxuIyBTdWJ0cmFjdCB2MSBmcm9tIHYyXG52MiAtIHYxIn0= Let us now change the elements in both vectors and make one vector longer than another to see something very strange. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB0d28gdmVjdG9yc1xuYSA8LSBjKDIwLCA0MCwgNjAsIDgwLCAxMDApXG5iIDwtIGMoNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgMzAwLCAzNTAsIDQwMCwgNDUwLCA1MDApXG5cbmxlbmd0aChhKVxubGVuZ3RoKGIpIn0= We can see from the above code that our first vector has 5 elements while our second has 10 elements. Let us perform a subtraction operation on these vectors. We will subtract b from a and save it to a variable to print later eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB2ZWN0b3JzIGEgYW5kIGJcbmEgPC0gYygyMCwgNDAsIDYwLCA4MCwgMTAwKVxuYiA8LSBjKDUwLCAxMDAsIDE1MCwgMjAwLCAyNTAsIDMwMCwgMzUwLCA0MDAsIDQ1MCwgNTAwKVxuXG4jIHN1YnRyYWN0IHZlY3RvciBhIGZyb20gYlxuYyA8LSBiIC0gYVxuXG4jIHByaW50IGNcbmMifQ== In the result produced from subtracting those vectors, we see something interesting. R produced the resulting vector c. Why doe we now have modified elements although vector a ran out of elements? What R does in the background is this: eyJsYW5ndWFnZSI6Im1kIiwic2FtcGxlIjoiYTogMjAgNDAgNjAgODAgMTAwXG5iOiA1MCAxMDAgMTUwIDIwMCAyNTAgMzAwIDM1MCA0MDAgNDUwIDUwMFxuXG5iIC0gYTogNTAtMjAgMTAwLTQwIDE1MC02MCAyMDAtODAgMjUwLTEwMCAzMDAtMjAgMzUwLTQwIDQwMC02MCA0NTAtODAgNTAwLTEwMCAgIn0= You will notice that, after the last element in a was reached, R started over the vector a till it matched the length of vector b to ensure the operation was complete. Why is this? This behavior is because, when R is performing an arithmetic operation on two vectors of unequal lengths, it recycles every element in the shorter vector till it matches the length of the longer vector. This is unintended behavior if you are not specifically performing an operation that mimics this. So when you define two vectors to perform an arithmetic operation on them, always ensure they are of similar lengths to avoid introducing unintended behavior into your code. Time for you to do some vector operations yourself. In the next two code chunks, define two vectors, x and y, where vector x is a vector with elements from numbers 8 to 14 and vector y contains elements from 3 to 9. In the first code chunk multiply x by y and in the next, divide y by x save both results to a variable called z and print it out. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSB2ZWN0b3IgeCBhbmQgeVxuXG5cblxuIyBQZXJmb3JtIG11bHRpcGxpY2F0aW9uIGFuZCBzYXZlIHRvIHpcblxuXG4jIFByaW50IHoiLCJzb2x1dGlvbiI6IiMgRGVmaW5lIHZlY3RvciB4IGFuZCB5XG54IDwtIDg6MTRcbnkgPC0gMzo5XG5cbiMgUGVyZm9ybSBtdWx0aXBsaWNhdGlvbiBhbmQgc2F2ZSB0byB6XG56IDwtIHggKiB5XG5cbiMgUHJpbnQgelxueiIsInNjdCI6InRlc3Rfb2JqZWN0KFwieFwiLFwieVwiLFwielwiKVxudGVzdF9vdXRwdXRfY29udGFpbnMoXCJ4IDwtIDg6MTQ7eSA8LSAzOjk7eiA8LSB4ICogeTt6XCIsXG4gICAgICAgICAgICAgICAgICAgICBpbmNvcnJlY3RfbXNnID0gXCJEaWQgeW91IGFzc2lnbiB0aGUgdmFyaWFibGVzIGNvcnJlY3RseT8uXCIpXG5zdWNjZXNzX21zZyhcIlN1Y2Nlc3NmdWwhXCIpIn0= 6.2.2 Indexing This might be one of the most handy R concepts you might learn from this course. Indexing is a pretty valuable concept to understand. Indexing in vectors refers to the process of accessing individual elements or subsets of elements within a vector. The syntax for indexing in R with vectors is using the square-bracket notation: vector[index] and specifying the index of the element or elements you want to extract. It is important to also state that, while other programming languages indexing starts at 0 (LUNATICS!), in R, like the sane people we are, indexing starts at 1. In R, indexing allows you to retrieve specific elements from a vector based on their position or index within the vector. We will learn about 3 types of indexing methods for this lesson and they are: single &amp; multi element indexing logical indexing negative indexing Now I left another type of creating vector out specifically so we can talk about it in this sub-lesson 6.2.2.1 Single &amp; Multi Element Indexing To extract or access a single element in a vector, you use square brackets and then supply the index of that element. If you are working with a named vector however, you only need to supply the name of that element. Let us see single element indexing in motion. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERlZmluZSBhIHZlY3RvclxueWVhcnMgPC0gMjAwMDoyMDA4XG55ZWFyc1xuXG4jIEV4dHJhY3QgMjAwNFxueWVhcl8yMDA0IDwtIHllYXJzWzVdXG55ZWFyXzIwMDQifQ== Simple! We supplied the number 5 and then we were able to index the year 2004. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENhcGl0YWxzXG5jYXBpdGFscyA8LSBjKFwiQWNjcmFcIiwgXCJCZXJsaW5cIiwgXCJOYWlyb2JpXCIsIFwiUGFyaXNcIiwgXCJMaXNib25cIilcblxuIyBFeHRyYWN0IFBhcmlzXG5mcmFuY2VfY2FwaXRhbCA8LSBjYXBpdGFsc1s0XVxuZnJhbmNlX2NhcGl0YWwifQ== Try your hands on the next single indexing activity below. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIEZydWl0cyB2ZWN0b3JcbmZydWl0cyA8LSBjKFwibWFuZ29cIiwgXCJhdm9jYWRvXCIsIFwiYmFuYW5hXCIsIFwicGF3cGF3XCIsIFwia2l3aVwiLCBcIndhdGVybWVsb25cIiwgXCJncmFwZVwiKVxuXG4jIEV4dHJhY3Qgd2F0ZXJtZWxvbiB0byBhIHZhcmlhYmxlIG5hbWVkIHdvcnN0X2ZydWl0IGFuZCBwcmludCBpdCJ9 Wow we did it together. If you really in anyway enjoy eating watermelon, kindly take a break immediately and take a long hard look at yourself in the mirror. Now that we have completed our daily fruit-shaming activity, let us move on to multi-element indexing. Sometimes you want to extract more than one element from a preexisting vector. How do we do that? We can do something called negative indexing which we will learn about later but wherever possible in your code, it is generally recommended not to alter elements you will reuse later, so instead of deleting elements which negative indexing does, we will extract what we need and save to a new vector. Going back to our fruits vector, let us say we want to extract the top 3 fruits of all time. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIEZydWl0cyB2ZWN0b3JcbmZydWl0cyA8LSBjKFwibWFuZ29cIiwgXCJhdm9jYWRvXCIsIFwiYmFuYW5hXCIsIFwicGF3cGF3XCIsIFwia2l3aVwiLCBcIndhdGVybWVsb25cIiwgXCJncmFwZVwiKVxuXG4jIEluZGV4IGJlc3QgZnJ1aXRzXG5nb2F0X2ZydWl0cyA8LSBmcnVpdHNbMTozXVxuZ29hdF9mcnVpdHMifQ== You noticed here we used our old friend the colon operator. The colon operator is not just used to create vectors you can also use it to specify a range to index a vector with. It is very handy when you want to generate a consecutive sequence and use that sequence to index a vector but sometimes, just sometimes, you would want to index elements in a vector that are not in a consecutive sequence. I know by now you’re saying what the hell is this guy on about but stay with me. Let me show you an example quickly, we shall use our fruit vector once again eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIEZydWl0cyB2ZWN0b3JcbmZydWl0cyA8LSBjKFwibWFuZ29cIiwgXCJhdm9jYWRvXCIsIFwiYmFuYW5hXCIsIFwicGF3cGF3XCIsIFwia2l3aVwiLCBcIndhdGVybWVsb25cIiwgXCJncmFwZVwiKVxuXG4jIEluZGV4IG1hbmdvLCBiYW5hbmEsIGtpd2kgYW5kIGdyYXBlXG5uZXdfZnJ1aXRzIDwtIGZydWl0c1tjKDEsIDMsIDUsIDcpXVxubmV3X2ZydWl0cyJ9 See there, we used a vector to index another vector. But this time, because the elements were not at consecutive indices, that is, indices 1, 2, 3, 4, 5, 6, 7 and so on, we had to supply the indices of the elements we wanted to extract as a vector to be able to subset those elements. You remember the : operator we used to subset the best fruits of all time? Using that was a shortcut and we could have also used a vector to subset the those fruits like this eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIEZydWl0cyB2ZWN0b3JcbmZydWl0cyA8LSBjKFwibWFuZ29cIiwgXCJhdm9jYWRvXCIsIFwiYmFuYW5hXCIsIFwicGF3cGF3XCIsIFwia2l3aVwiLCBcIndhdGVybWVsb25cIiwgXCJncmFwZVwiKVxuXG4jIEluZGV4IGJlc3QgZnJ1aXRzXG5nb2F0X2ZydWl0cyA8LSBmcnVpdHNbYygxLCAyLCAzKV1cbmdvYXRfZnJ1aXRzIn0= This worked too. We did not use the colon operator but we were still able to subset the same elements. You will find that in R, there are numerous ways to solve a problem and the selection of a solution for any problem or task you may encounter is dependent on that specific task. 6.2.2.2 Logical Indexing Logical indexing in R refers to the process of using logical vectors to subset or extract elements from a data structure based on a given condition. So in indexing a vector with a logical vector, you need to first create the condition you want to subset for then use that logical vector to subset the initial vector you want to index to extract only elements that meet the specified condition. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvclxudmVjIDwtIGMoNTQsIDEwLCAyMSwgMzAsIDQwLCAxMiwgOTgsIDUwLCA4NSwgMTMpXG5cbiMgQ3JlYXRlIGEgbG9naWNhbCB2ZWN0b3IgaW5kaWNhdGluZyB3aGljaCBlbGVtZW50cyBhcmUgZ3JlYXRlciB0aGFuIDMwXG5sb2dpY2FsX3ZlY3RvciA8LSB2ZWMgPiAzMFxuXG4jIFVzZSBsb2dpY2FsIGluZGV4aW5nIHRvIHN1YnNldCBlbGVtZW50cyBncmVhdGVyIHRoYW4gMzBcbnN1YnNldF92ZWMgPC0gdmVjW2xvZ2ljYWxfdmVjdG9yXVxuXG4jIFByaW50IHRoZSByZXN1bHRcbnN1YnNldF92ZWMifQ== 6.2.3 SUMMARY STATISTICS Summary statistics are numerical values that summarize and describe features of a range of values. They provide insights into the characteristics and distribution of the data. For this lesson we will talk about mean, median, mode, standard deviation, minimum, maximum and variance. You will be performing summary statistic operations mostly on dataframes but in the background R treats this columns you will try to derive summary statistics from so we will see how to do that. We will do a lesson on summary statistics and its applications in R from a theoretical and then a practical point of view but this section will talk we will serve summary statistics as an entrée (I’m fresh of my daily french duolingo lesson lol). 6.2.3.1 Mean The mean is the average value of a set of given values. It is calculated by adding up all the values in the given set of numbers and then dividing by the total number of values in that distribution. The function to do this is: mean(). Let us see how to calculate the mean of a given range of values in R. The data structure we will use in this lesson is vectors. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciBvZiBudW1iZXJzXG52ZWMgPC0gc2VxKGZyb209MSx0bz0yMSwgYnk9MylcblxuIyBDYWxjdWxhdGUgdGhlIG1lYW4gb2YgdmVjXG5tZWFuKHZlYykifQ== Perfect! We were able to calculate the mean of vec and we got the answer 10. This is how you calculate the mean. Try your hands on calculating the mean of a vector called v1 which contains a sequence of numbers from 28 to 50. You can use the colon operator to create this v1 and calculate the mean. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciBuYW1lZCB2MSB0aHVhdCBjb250YWlucyBudW1iZXJzIGZyb20gMjggdG8gNTBcblxuXG4jIENhbGN1bGF0ZSB0aGUgbWVhbiBvZiB2MSJ9 6.2.3.2 Median The median is a measure of central tendency that represents the middle value of a given set of values when that set of values is ordered from the least to the greatest. In R, when you call the median function, the rearrangement from least to greatest value is automatically performed in the background. Cool, no? There is a little thing I would like to include here. If the length of the range of values that the median is being calculated for is odd, the median will be the middle value however if the range of values is an even number of values, the median is the average of the two middle values. If this confused you, you definitely hate math but hold on, I will show what this means in an example below. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciB3aXRoIGFuIG9kZCBudW1iZXIgb2YgdmFsdWVzXG5vZGRfdmFsdWVzIDwtIGMoMSwgMiwgMywgNCwgNSwgNiwgNylcblxuIyBDaGVjayBsZW5ndGggb2Ygb2RkX3ZhbHVlc1xubGVuZ3RoKG9kZF92YWx1ZXMpXG5cbiMgQ2FsY3VsYXRlIHRoZSBtZWRpYW5cbm1lZGlhbihvZGRfdmFsdWVzKSJ9 In the example above, the vector odd_values has 7 values as printed by the result of the length() function called on odd_values. So the median is going to be the middle number of the set of values of the vector odd_values. Let us see another example with a range of values whose length is even. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciB3aXRoIGFuIGV2ZW4gbnVtYmVyIG9mIHZhbHVlc1xuZXZlbl92YWx1ZXMgPC0gYygxLCAyLCAzLCA0LCA1LCA2LCA3LCA4KVxuXG4jIENoZWNrIGxlbmd0aCBvZiBldmVuX3ZhbHVlc1xubGVuZ3RoKGV2ZW5fdmFsdWVzKVxuXG4jIENhbGN1bGF0ZSB0aGUgbWVkaWFuXG5tZWRpYW4oZXZlbl92YWx1ZXMpIn0= So what R does here is simple. Since the vector even_values has 8 elements in it, the median cannot be the middle value since technically we have two middle values in this set of values. What happens is, R will add these two middle values together and divide by the count of these numbers, which in this case is 2. In other words, R calculates the average of the middle values so in the background, the two values in the middle of even_values, 4 and 5 are added and divided by the count of these values which is 2. This is what happens mathematically the sum of 4 and 5 divided by 2 becomes our median value. 6.2.3.3 Mode The mode refers to the value that occurs the most in a distribution. If you visualize a histogram, this value will represent the peak of the distribution. R does not have a built-in function that calculates the mode of a distribution. But you can use the table() function to calculate the most recurring value in a distribution. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSBhIHZlY3RvciB2MVxudjEgPC0gYygxLCA1LCA5LCA5LCAxNywgNSwgMTMsIDksIDksIDMsIDEsIDkpXG5cbiMgVGFidWxhdGUgbW9zdCByZWN1cnJpbmcgdmFsdWVcbnRhYmxlKHYxKSJ9 Voilà! We can find that from our v1 vector that the most recurring values is 9. The table() function in R is used to create contingency tables of the counts of categories. Do not worry about it so much now as we will discuss it in further detail in latter lessons. But also a spoiler: in a latter lesson about functions you will create a function that calculates the mode of a given distribution. 6.2.3.4 Standard Deviation Standard deviation is a measure of the dispersion or spread of a set of values around the mean, indicating how much values in a given distribution deviate from the average. A larger standard deviation implies greater variability or spread of the values, while a smaller standard deviation suggests less variability or tighter clustering of the values around the mean. In R you can calculate the standard deviation of a range of values by using the sd() function. Let us see that in action. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSB2ZWN0b3JcbnZlYyA8LSBjKDQ0LCA4NywgNTYsIDMyLCA3NywgMjUsIDYxLCA1MCwgMTApXG5cbiMgQ2FsY3VsYXRlIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24gb2YgdmVjXG5zZCh2ZWMpIn0= 6.2.3.5 Minimum and Maximum The minimum is used to refer to the minimum or smallest value in a given distribution while maximum refers to the greatest or largest value in a given distribution. In R, in the most unimaginative way as possible, the functions to calculate the minimum and maximum values in a given distribution are min() and max() respectively. As always, let us see an example of this. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSB2ZWN0b3JcbnggPC0gYyg1LCA5LCA5OCwgMjMsIDIsIDIyLCA2NSwgOTksIDg3LCAzNSwgMTcpXG5cbiMgRmluZCB0aGUgaGlnaGVzdCB2YWx1ZSBpbiB2ZWN0b3IgeFxubWF4KHgpXG5cbiMgRmluZCB0aGUgc21hbGxlc3QgdmFsdWUgaW4gdmVjdG9yIHhcbm1pbih4KSJ9 For our vector x, the smallest value was 2 and the highest value was 99. 6.2.3.6 IMPORTANT For calculating summary statistics, there is one very important detail you should note. In R and in real life, more often than not you will encounter missing values or undefined values in distributions. In R, these values are represented by NA, which is short for Not Available. When calculating any summary statistic, it is recommended to initially check if that range of values contain NA values. We will get to that shortly but I want to show you what happens when you try to calculate a summary statistic when there are NA values present in the data that you are working with. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFZlY3RvciBjb250YWluaW5nIE5BIHZhbHVlc1xuYSA8LSBjKDEyLCA0LCAzLCAxNywgTkEsIDIwLCAxOSlcblxuIyBDYWxjdWxhdGUgbWVhblxubWVhbihhKSJ9 Running this code chunk above gives you a mean of NA, which isn’t right. Now imagine you had data and variables that you wanted to report on the mean or median or standard deviation for and you get an NA value, that is not so practical is it. This is R’s default behavior with handling missing values but I will also like to point out the importance of this behavior. R does this to ensure missing data is not inadvertently ignored or treated as zero as this can potentially lead to misleading results in data analysis. You would have to explicitly supply an extra argument known as na.rm and set it to TRUE. R will then remove the missing values before computing the summary statistic, in our case, the mean. Let us quickly do this below. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIFZlY3RvciBjb250YWluaW5nIE5BIHZhbHVlc1xuYSA8LSBjKDEyLCA0LCAzLCAxNywgTkEsIDIwLCAxOSlcblxuIyBDYWxjdWxhdGUgbWVhblxubWVhbihhLCBuYS5ybSA9IFRSVUUpIn0= Now the mean is calculated correctly for us. This applies also to functions like median(), sd(), max(), min(). The question that is probably lingering behind the back of your head is how do you check if a vector has NA values. You can use a function called is.na(). This function however will return a vector of logical values which is prints true or false for each element stating whether it is an NA value or not. See how this works. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSB2ZWN0b3IgY29udGFpbmluZyBOQSB2YWx1ZXNcbmEgPC0gYygxMiwgNCwgMywgMTcsIE5BLCAyMCwgMTksIE5BKVxuXG4jIENoZWNrIGlmIGEgaGFzIG1pc3NpbmcgdmFsdWVzXG5pcy5uYShhKSJ9 So this functions returns a logical vector and the elements of this logical vector specifies whether the element in the vector you are checking for NA values in is an NA value or not. Now if you have a really large vector with a lot of elements this logical vector will return a lot of values which may be a little difficult to manually scan each element of the output of this logical vector to determine if there is a TRUE value before you conclude there are missing values in the distribution you’re working with. This is where I teach you another R function that makes your life easier: the any() function. Let’s look at how it works with the same vector eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIENyZWF0ZSB2ZWN0b3IgY29udGFpbmluZyBOQSB2YWx1ZXNcbmEgPC0gYygxMiwgNCwgMywgMTcsIE5BLCAyMCwgMTksIE5BKVxuXG4jIENoZWNrIGlmIGEgaGFzIG1pc3NpbmcgdmFsdWVzXG5hbnkoaXMubmEoYSkpIn0= This returns just one value that specifies if there is any NA value present in the distribution you are working with and you know whether to supply a value to the na.rm argument when computing a summary statistic. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
